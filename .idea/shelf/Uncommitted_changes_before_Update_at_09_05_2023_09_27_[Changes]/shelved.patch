Index: SensorAnalyzer.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SensorAnalyzer.cpp b/SensorAnalyzer.cpp
new file mode 100644
--- /dev/null	(date 1683617259411)
+++ b/SensorAnalyzer.cpp	(date 1683617259411)
@@ -0,0 +1,56 @@
+//
+// Created by Léo Aimonetto on 09/05/2023.
+//
+
+#include "SensorAnalyzer.h"
+#include "Date.h"
+#include <cmath>
+#include <iostream>
+
+using namespace std;
+
+SensorAnalyzer::SensorAnalyzer() {
+}
+
+bool SensorAnalyzer::analyzeSensor(const string& userID, const string& sensorID, const vector<Sensor>& sensors, const vector<Measurement>& measurements) {
+    bool reliable = true;
+    int timeRange = 30; // days
+    double localisation = 0; // dummy value, replace with actual location
+    double zone = 1; // km
+    double deltaOfReliability = 10;
+    Date startDate = "2023-04-01"; // replace with actual start date
+
+    if (/*startDate > today - timeRange*/) { // Implement date comparison
+        // return error
+    } else {
+        for (const auto& measurement : measurements) {
+            if (measurement.sensorID == sensorID && isnan(measurement.value)) {
+                reliable = false;
+                break;
+            }
+        }
+
+        double mean_surroundings = calculateMeanSurroundings(localisation, zone, sensors, measurements);
+        double mean_sensor = calculateMean(sensorID, startDate, timeRange, measurements);
+
+        if (abs(mean_surroundings - mean_sensor) > deltaOfReliability) {
+            reliable = false;
+        }
+
+        if (userID.empty() && !reliable) {
+            // Change all the sensors of the user as unreliable
+        }
+    }
+
+    return reliable;
+}
+
+double SensorAnalyzer::calculateMeanSurroundings(double localisation, double zone, const vector<Sensor>& sensors, const vector<Measurement>& measurements) {
+    // Implement calculation of mean for surroundings
+    return 0; // Replace with actual calculation
+}
+
+double SensorAnalyzer::calculateMean(const string& sensorID, const string& startDate, int timeRange, const vector<Measurement>& measurements) {
+    // Implement calculation of mean for the sensor
+    return 0; // Replace with actual calculation
+}
\ No newline at end of file
Index: SensorAnalyzer.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SensorAnalyzer.h b/SensorAnalyzer.h
new file mode 100644
--- /dev/null	(date 1683617259413)
+++ b/SensorAnalyzer.h	(date 1683617259413)
@@ -0,0 +1,37 @@
+//
+// Created by Léo Aimonetto on 09/05/2023.
+//
+
+#ifndef SENSOR_ANALYZER_H
+#define SENSOR_ANALYZER_H
+
+#include <string>
+#include <vector>
+#include <iostream>
+
+using namespace std;
+
+
+struct Sensor {
+    string sensorID;
+    double latitude;
+    double longitude;
+};
+
+struct Measurement {
+    string timestamp;
+    string sensorID;
+    string attributeID;
+    double value;
+};
+
+class SensorAnalyzer {
+public:
+    SensorAnalyzer();
+    bool analyzeSensor(const string& userID, const string& sensorID, const vector<Sensor>& sensors, const vector<Measurement>& measurements);
+private:
+    double calculateMeanSurroundings(double localisation, double zone, const vector<Sensor>& sensors, const vector<Measurement>& measurements);
+    double calculateMean(const string& sensorID, const string& startDate, int timeRange, const vector<Measurement>& measurements);
+};
+
+#endif // SENSOR_ANALYZER_H
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1683613053623)
+++ b/.idea/misc.xml	(date 1683613053623)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MakefileSettings">
+    <option name="linkedExternalProjectsSettings">
+      <MakefileProjectSettings>
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="version" value="2" />
+      </MakefileProjectSettings>
+    </option>
+  </component>
+  <component name="MakefileWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1683613053627)
+++ b/.idea/vcs.xml	(date 1683613053627)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1683613055490)
+++ b/.idea/.gitignore	(date 1683613055490)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
